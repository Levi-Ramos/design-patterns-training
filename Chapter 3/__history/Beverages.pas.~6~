unit Beverages;

interface

type
	TBeverage = class abstract
  	FDescription: string;
  	function GetDescription: string; 
    function Cost: Double; virtual; abstract;
    constructor Create; virtual;
  end;

  TEspresso = class(TBeverage)
  	constructor Create;
    function Cost: Double; override;
  end;                       	

  THouseBlend = class(TBeverage)
  	constructor Create;
    function Cost: DOuble; override;
  end;

implementation

{ TBeverage }

constructor TBeverage.Create;
begin
	FDescription := 'Unknown Beverage';
end;

function TBeverage.GetDescription: string;
begin
	Result := FDescription;
end;

function TEspresso.cost: Double;
begin
	Result := 1.99;
end;

constructor TEspresso.Create;
begin
	FDescription := 'Espresso';
end;

{ THouseBlend }

function THouseBlend.Cost: DOuble;
begin
	Result := 0.89;
end;

constructor THouseBlend.Create;
begin
	FDescription := 'House Blend Coffee';
end;

end.
