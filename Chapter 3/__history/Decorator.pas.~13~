unit Decorator;

interface

uses Beverages;

type
	TCondimentDecorator = class abstract(TBeverage) 
  	FBeverage: TBeverage;
  	function GetDescription: string; virtual; abstract;
    constructor Create(ABeverage: TBeverage); virtual;
  end; 

  TMocha = class(TCondimentDecorator)
    function GetDescription: string; override;
    function Cost: Double; override;
  end;

  TWhip = class(TCondimentDecorator)
    function GetDescription: string; override;
    function Cost: Double; override;
  end;

implementation

uses
  System.SysUtils;

{ TMocha }

function TMocha.Cost: Double;
begin
	Result := FBeverage.Cost + 0.20;
end;

function TMocha.GetDescription: string;
begin
	if FBeverage = nil then
  begin
    Writeln('Error: FBeverage is nil in Mocha!');
    Result := 'Error';
  end
  else
  begin
	Result := FBeverage.GetDescription + ', Mocha';
	end;	
end;

{ TCondimentDecorator }

constructor TCondimentDecorator.Create(ABeverage: TBeverage);
begin
	FBeverage := ABeverage;
end;

{ TWhip }

function TWhip.Cost: Double;
begin
	Result := FBeverage.Cost + 0.20;
end;

function TWhip.GetDescription: string;
begin
	Result := FBeverage.GetDescription + ', Whip';
end;

end.
