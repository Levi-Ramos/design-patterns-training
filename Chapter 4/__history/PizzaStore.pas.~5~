unit PizzaStore;

interface

uses Pizza;

type
	TPizzaType = (CHEESE, PEPPERONI);
	TPizzaStore = class abstract
  protected
  	function CreatePizza(APizzaType: TPizzaType): TPizza; virtual; abstract;
  public
    function OrderPizza(APizzaType: TPizzaType): TPizza;
  end;

  TNyStylePizzaStore = class(TPizzaStore)                             
  protected
  	function CreatePizza(APizzaType: TPizzaType): TPizza; override;
  end;

  TChStylePizzaStore = class(TPizzaStore)
  protected
  	function CreatePizza(APizzaType: TPizzaType): TPizza; override;
  end;

implementation


{ TPizzaStore }

function TPizzaStore.OrderPizza(APizzaType: TPizzaType): TPizza;
var
	LPizza: TPizza;
begin
	LPizza := CreatePizza(APizzaType);
  LPizza.Prepare;
  LPizza.Bake;
  LPizza.Cut;
  LPizza.Box;
  Result := LPizza;
end;

{ TNyStylePizzaStore }

function TNyStylePizzaStore.CreatePizza(APizzaType: TPizzaType) : TPizza;
var
	LPizza: TPizza;
begin
  case APizzaType of
    CHEESE: TNyStyleCheese.Create; 
    PEPPERONI: TNyStylePepperoni.Create;
  end;

  Result := LPizza;
end;

{ TChStylePizzaStore }

function TChStylePizzaStore.CreatePizza(APizzaType: TPizzaType): TPizza;
var
	LPizza: TPizza;
begin
  case APizzaType of
    CHEESE: TChStyleCheese.Create;
    PEPPERONI: TChStylePepperoni.Create;
  end;

  Result := LPizza;
end;
end.
